name: Codedeploy Trigger

on:
  workflow_run:
    workflows: ['IMAGE PUSH TO ECR']
    types:
      - completed
      - success
    branches: [feature]

permissions:
  id-token: write
  contents: read

env:
  AWS_REGION: ap-northeast-1 # your AWS region
  ECR_REPOSITORY: dev/practice # your ECR repository name

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Check IMAGE PUSH TO ECR Workflow
        run: echo "Codedeploy Trigger is running after IMAGE PUSH TO ECR completed successfully"

      - name: Configure AWS Credential
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-region: ${{ env.AWS_REGION }}
          role-to-assume: ${{ secrets.AWS_IAM_ROLE_ARN_FOR_GOLANG }}

      # 以降で、registryを変数で使うためにECRにログインする
      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2
        with:
          mask-password: 'true'

      # amazon-ecs-render-task-definition を使うために TaskDefinition を ECS から取ってくる
      - name: Fetch TaskDefinition from ECS and generate task-def-api.json (api)
        run: |
          aws ecs describe-task-definition --task-definition terraform-family | \
            jq '.taskDefinition | del (.taskDefinitionArn, .revision, .status, .requiresAttributes, .compatibilities, .registeredAt, .registeredBy)' > task-def-api.json

      # TaskDefinition の image を push した最新のものに書き換える
      - name: Render TaskDefinition
        id: render-container-api
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: task-def-api.json
          container-name: go
          image: ${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPOSITORY }}:go-${{ github.sha }}

      # デプロイする
      - name: Deploy app with CodeDeploy Blue/Green deployment
        uses: aws-actions/amazon-ecs-deploy-task-definition@v1
        with:
          task-definition: ${{ steps.render-container-api.outputs.task-definition }}
          cluster: terraform-ecs-cluster
          service: terraform-ecs-service
          wait-for-service-stability: true
          codedeploy-appspec: terraform/modules/pipeline/appspec.yml
          codedeploy-application: terraform-ecs-app
          codedeploy-deployment-group: terraform-ecs-deployment-group
